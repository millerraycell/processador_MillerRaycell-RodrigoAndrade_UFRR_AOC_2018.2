/*
WARNING: Do NOT edit the input and output ports in this file in a text
editor if you plan to continue editing the block that represents it in
the Block Editor! File corruption is VERY likely to occur.
*/

/*
Copyright (C) 2018  Intel Corporation. All rights reserved.
Your use of Intel Corporation's design tools, logic functions 
and other software and tools, and its AMPP partner logic 
functions, and any output files from any of the foregoing 
(including device programming or simulation files), and any 
associated documentation or information are expressly subject 
to the terms and conditions of the Intel Program License 
Subscription Agreement, the Intel Quartus Prime License Agreement,
the Intel FPGA IP License Agreement, or other applicable license
agreement, including, without limitation, that your use is for
the sole purpose of programming logic devices manufactured by
Intel and sold by Intel or its authorized distributors.  Please
refer to the applicable agreement for further details.
*/

HEADER
{
	VERSION = 1;
	TIME_UNIT = ns;
	DATA_OFFSET = 0.0;
	DATA_DURATION = 1000.0;
	SIMULATION_TIME = 0.0;
	GRID_PHASE = 0.0;
	GRID_PERIOD = 10.0;
	GRID_DUTY_CYCLE = 50;
}

SIGNAL("Clock_Sistema")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("Instruct_out")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 16;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("Instruct_out[15]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Instruct_out";
}

SIGNAL("Instruct_out[14]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Instruct_out";
}

SIGNAL("Instruct_out[13]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Instruct_out";
}

SIGNAL("Instruct_out[12]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Instruct_out";
}

SIGNAL("Instruct_out[11]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Instruct_out";
}

SIGNAL("Instruct_out[10]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Instruct_out";
}

SIGNAL("Instruct_out[9]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Instruct_out";
}

SIGNAL("Instruct_out[8]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Instruct_out";
}

SIGNAL("Instruct_out[7]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Instruct_out";
}

SIGNAL("Instruct_out[6]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Instruct_out";
}

SIGNAL("Instruct_out[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Instruct_out";
}

SIGNAL("Instruct_out[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Instruct_out";
}

SIGNAL("Instruct_out[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Instruct_out";
}

SIGNAL("Instruct_out[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Instruct_out";
}

SIGNAL("Instruct_out[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Instruct_out";
}

SIGNAL("Instruct_out[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Instruct_out";
}

SIGNAL("Instruction_to_Control")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 4;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("Instruction_to_Control[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Instruction_to_Control";
}

SIGNAL("Instruction_to_Control[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Instruction_to_Control";
}

SIGNAL("Instruction_to_Control[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Instruction_to_Control";
}

SIGNAL("Instruction_to_Control[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Instruction_to_Control";
}

SIGNAL("Instruction_to_controlULA")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 3;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("Instruction_to_controlULA[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Instruction_to_controlULA";
}

SIGNAL("Instruction_to_controlULA[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Instruction_to_controlULA";
}

SIGNAL("Instruction_to_controlULA[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Instruction_to_controlULA";
}

SIGNAL("Instruction_to_is_BEQ")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 6;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("Instruction_to_is_BEQ[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Instruction_to_is_BEQ";
}

SIGNAL("Instruction_to_is_BEQ[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Instruction_to_is_BEQ";
}

SIGNAL("Instruction_to_is_BEQ[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Instruction_to_is_BEQ";
}

SIGNAL("Instruction_to_is_BEQ[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Instruction_to_is_BEQ";
}

SIGNAL("Instruction_to_is_BEQ[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Instruction_to_is_BEQ";
}

SIGNAL("Instruction_to_is_BEQ[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Instruction_to_is_BEQ";
}

SIGNAL("Instruction_to_Jump")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 12;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("Instruction_to_Jump[11]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Instruction_to_Jump";
}

SIGNAL("Instruction_to_Jump[10]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Instruction_to_Jump";
}

SIGNAL("Instruction_to_Jump[9]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Instruction_to_Jump";
}

SIGNAL("Instruction_to_Jump[8]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Instruction_to_Jump";
}

SIGNAL("Instruction_to_Jump[7]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Instruction_to_Jump";
}

SIGNAL("Instruction_to_Jump[6]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Instruction_to_Jump";
}

SIGNAL("Instruction_to_Jump[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Instruction_to_Jump";
}

SIGNAL("Instruction_to_Jump[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Instruction_to_Jump";
}

SIGNAL("Instruction_to_Jump[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Instruction_to_Jump";
}

SIGNAL("Instruction_to_Jump[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Instruction_to_Jump";
}

SIGNAL("Instruction_to_Jump[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Instruction_to_Jump";
}

SIGNAL("Instruction_to_Jump[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Instruction_to_Jump";
}

SIGNAL("Instruction_to_register1")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 3;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("Instruction_to_register1[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Instruction_to_register1";
}

SIGNAL("Instruction_to_register1[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Instruction_to_register1";
}

SIGNAL("Instruction_to_register1[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Instruction_to_register1";
}

SIGNAL("Instruction_to_register2")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 3;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("Instruction_to_register2[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Instruction_to_register2";
}

SIGNAL("Instruction_to_register2[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Instruction_to_register2";
}

SIGNAL("Instruction_to_register2[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Instruction_to_register2";
}

SIGNAL("Instruction_to_writeRegister")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 3;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("Instruction_to_writeRegister[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Instruction_to_writeRegister";
}

SIGNAL("Instruction_to_writeRegister[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Instruction_to_writeRegister";
}

SIGNAL("Instruction_to_writeRegister[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Instruction_to_writeRegister";
}

TRANSITION_LIST("Clock_Sistema")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 50.0;
			LEVEL 1 FOR 50.0;
			LEVEL 0 FOR 50.0;
			LEVEL 1 FOR 50.0;
			LEVEL 0 FOR 50.0;
			LEVEL 1 FOR 50.0;
			LEVEL 0 FOR 50.0;
			LEVEL 1 FOR 50.0;
			LEVEL 0 FOR 50.0;
			LEVEL 1 FOR 50.0;
			LEVEL 0 FOR 50.0;
			LEVEL 1 FOR 50.0;
			LEVEL 0 FOR 50.0;
			LEVEL 1 FOR 50.0;
			LEVEL 0 FOR 50.0;
			LEVEL 1 FOR 50.0;
			LEVEL 0 FOR 50.0;
			LEVEL 1 FOR 50.0;
			LEVEL 0 FOR 50.0;
			LEVEL 1 FOR 50.0;
		}
	}
}

TRANSITION_LIST("Instruct_out[15]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 50.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 650.0;
		}
	}
}

TRANSITION_LIST("Instruct_out[14]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 1 FOR 50.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 650.0;
		}
	}
}

TRANSITION_LIST("Instruct_out[13]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 50.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 750.0;
		}
	}
}

TRANSITION_LIST("Instruct_out[12]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 1 FOR 50.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 750.0;
		}
	}
}

TRANSITION_LIST("Instruct_out[11]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 50.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 650.0;
		}
	}
}

TRANSITION_LIST("Instruct_out[10]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 1 FOR 50.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 650.0;
		}
	}
}

TRANSITION_LIST("Instruct_out[9]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 50.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 750.0;
		}
	}
}

TRANSITION_LIST("Instruct_out[8]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 1 FOR 50.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 750.0;
		}
	}
}

TRANSITION_LIST("Instruct_out[7]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 50.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 650.0;
		}
	}
}

TRANSITION_LIST("Instruct_out[6]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 1 FOR 50.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 650.0;
		}
	}
}

TRANSITION_LIST("Instruct_out[5]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 50.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 750.0;
		}
	}
}

TRANSITION_LIST("Instruct_out[4]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 1 FOR 50.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 750.0;
		}
	}
}

TRANSITION_LIST("Instruct_out[3]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 50.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 650.0;
		}
	}
}

TRANSITION_LIST("Instruct_out[2]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 1 FOR 50.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 650.0;
		}
	}
}

TRANSITION_LIST("Instruct_out[1]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 50.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 750.0;
		}
	}
}

TRANSITION_LIST("Instruct_out[0]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 1 FOR 50.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 750.0;
		}
	}
}

TRANSITION_LIST("Instruction_to_Control[3]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL Z FOR 50.0;
			LEVEL 0 FOR 100.0;
			LEVEL Z FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL Z FOR 100.0;
			LEVEL 0 FOR 550.0;
		}
	}
}

TRANSITION_LIST("Instruction_to_Control[2]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL Z FOR 50.0;
			LEVEL 1 FOR 100.0;
			LEVEL Z FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL Z FOR 100.0;
			LEVEL 0 FOR 550.0;
		}
	}
}

TRANSITION_LIST("Instruction_to_Control[1]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL Z FOR 50.0;
			LEVEL 0 FOR 100.0;
			LEVEL Z FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL Z FOR 100.0;
			LEVEL 0 FOR 550.0;
		}
	}
}

TRANSITION_LIST("Instruction_to_Control[0]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL Z FOR 50.0;
			LEVEL 1 FOR 100.0;
			LEVEL Z FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL Z FOR 100.0;
			LEVEL 0 FOR 550.0;
		}
	}
}

TRANSITION_LIST("Instruction_to_controlULA[2]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL Z FOR 450.0;
			LEVEL 0 FOR 550.0;
		}
	}
}

TRANSITION_LIST("Instruction_to_controlULA[1]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL Z FOR 450.0;
			LEVEL 0 FOR 550.0;
		}
	}
}

TRANSITION_LIST("Instruction_to_controlULA[0]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL Z FOR 450.0;
			LEVEL 0 FOR 550.0;
		}
	}
}

TRANSITION_LIST("Instruction_to_is_BEQ[5]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL Z FOR 250.0;
			LEVEL 1 FOR 100.0;
			LEVEL Z FOR 650.0;
		}
	}
}

TRANSITION_LIST("Instruction_to_is_BEQ[4]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL Z FOR 250.0;
			LEVEL 1 FOR 100.0;
			LEVEL Z FOR 650.0;
		}
	}
}

TRANSITION_LIST("Instruction_to_is_BEQ[3]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL Z FOR 250.0;
			LEVEL 0 FOR 100.0;
			LEVEL Z FOR 650.0;
		}
	}
}

TRANSITION_LIST("Instruction_to_is_BEQ[2]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL Z FOR 250.0;
			LEVEL 0 FOR 100.0;
			LEVEL Z FOR 650.0;
		}
	}
}

TRANSITION_LIST("Instruction_to_is_BEQ[1]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL Z FOR 250.0;
			LEVEL 1 FOR 100.0;
			LEVEL Z FOR 650.0;
		}
	}
}

TRANSITION_LIST("Instruction_to_is_BEQ[0]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL Z FOR 250.0;
			LEVEL 1 FOR 100.0;
			LEVEL Z FOR 650.0;
		}
	}
}

TRANSITION_LIST("Instruction_to_Jump[11]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL Z FOR 50.0;
			LEVEL 0 FOR 100.0;
			LEVEL Z FOR 850.0;
		}
	}
}

TRANSITION_LIST("Instruction_to_Jump[10]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL Z FOR 50.0;
			LEVEL 1 FOR 100.0;
			LEVEL Z FOR 850.0;
		}
	}
}

TRANSITION_LIST("Instruction_to_Jump[9]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL Z FOR 50.0;
			LEVEL 0 FOR 100.0;
			LEVEL Z FOR 850.0;
		}
	}
}

TRANSITION_LIST("Instruction_to_Jump[8]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL Z FOR 50.0;
			LEVEL 1 FOR 100.0;
			LEVEL Z FOR 850.0;
		}
	}
}

TRANSITION_LIST("Instruction_to_Jump[7]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL Z FOR 50.0;
			LEVEL 0 FOR 100.0;
			LEVEL Z FOR 850.0;
		}
	}
}

TRANSITION_LIST("Instruction_to_Jump[6]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL Z FOR 50.0;
			LEVEL 1 FOR 100.0;
			LEVEL Z FOR 850.0;
		}
	}
}

TRANSITION_LIST("Instruction_to_Jump[5]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL Z FOR 50.0;
			LEVEL 0 FOR 100.0;
			LEVEL Z FOR 850.0;
		}
	}
}

TRANSITION_LIST("Instruction_to_Jump[4]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL Z FOR 50.0;
			LEVEL 1 FOR 100.0;
			LEVEL Z FOR 850.0;
		}
	}
}

TRANSITION_LIST("Instruction_to_Jump[3]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL Z FOR 50.0;
			LEVEL 0 FOR 100.0;
			LEVEL Z FOR 850.0;
		}
	}
}

TRANSITION_LIST("Instruction_to_Jump[2]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL Z FOR 50.0;
			LEVEL 1 FOR 100.0;
			LEVEL Z FOR 850.0;
		}
	}
}

TRANSITION_LIST("Instruction_to_Jump[1]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL Z FOR 50.0;
			LEVEL 0 FOR 100.0;
			LEVEL Z FOR 850.0;
		}
	}
}

TRANSITION_LIST("Instruction_to_Jump[0]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL Z FOR 50.0;
			LEVEL 1 FOR 100.0;
			LEVEL Z FOR 850.0;
		}
	}
}

TRANSITION_LIST("Instruction_to_register1[2]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL Z FOR 450.0;
			LEVEL 0 FOR 550.0;
		}
	}
}

TRANSITION_LIST("Instruction_to_register1[1]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL Z FOR 450.0;
			LEVEL 0 FOR 550.0;
		}
	}
}

TRANSITION_LIST("Instruction_to_register1[0]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL Z FOR 450.0;
			LEVEL 0 FOR 550.0;
		}
	}
}

TRANSITION_LIST("Instruction_to_register2[2]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL Z FOR 250.0;
			LEVEL 1 FOR 100.0;
			LEVEL Z FOR 100.0;
			LEVEL 0 FOR 550.0;
		}
	}
}

TRANSITION_LIST("Instruction_to_register2[1]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL Z FOR 250.0;
			LEVEL 0 FOR 100.0;
			LEVEL Z FOR 100.0;
			LEVEL 0 FOR 550.0;
		}
	}
}

TRANSITION_LIST("Instruction_to_register2[0]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL Z FOR 250.0;
			LEVEL 0 FOR 100.0;
			LEVEL Z FOR 100.0;
			LEVEL 0 FOR 550.0;
		}
	}
}

TRANSITION_LIST("Instruction_to_writeRegister[2]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL Z FOR 250.0;
			LEVEL 0 FOR 100.0;
			LEVEL Z FOR 100.0;
			LEVEL 0 FOR 550.0;
		}
	}
}

TRANSITION_LIST("Instruction_to_writeRegister[1]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL Z FOR 250.0;
			LEVEL 0 FOR 100.0;
			LEVEL Z FOR 100.0;
			LEVEL 0 FOR 550.0;
		}
	}
}

TRANSITION_LIST("Instruction_to_writeRegister[0]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL Z FOR 250.0;
			LEVEL 1 FOR 100.0;
			LEVEL Z FOR 100.0;
			LEVEL 0 FOR 550.0;
		}
	}
}

DISPLAY_LINE
{
	CHANNEL = "Clock_Sistema";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 0;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "Instruct_out";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 1;
	TREE_LEVEL = 0;
	CHILDREN = 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17;
}

DISPLAY_LINE
{
	CHANNEL = "Instruct_out[15]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 2;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "Instruct_out[14]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 3;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "Instruct_out[13]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 4;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "Instruct_out[12]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 5;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "Instruct_out[11]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 6;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "Instruct_out[10]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 7;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "Instruct_out[9]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 8;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "Instruct_out[8]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 9;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "Instruct_out[7]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 10;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "Instruct_out[6]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 11;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "Instruct_out[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 12;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "Instruct_out[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 13;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "Instruct_out[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 14;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "Instruct_out[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 15;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "Instruct_out[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 16;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "Instruct_out[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 17;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "Instruction_to_Control";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 18;
	TREE_LEVEL = 0;
	CHILDREN = 19, 20, 21, 22;
}

DISPLAY_LINE
{
	CHANNEL = "Instruction_to_Control[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 19;
	TREE_LEVEL = 1;
	PARENT = 18;
}

DISPLAY_LINE
{
	CHANNEL = "Instruction_to_Control[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 20;
	TREE_LEVEL = 1;
	PARENT = 18;
}

DISPLAY_LINE
{
	CHANNEL = "Instruction_to_Control[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 21;
	TREE_LEVEL = 1;
	PARENT = 18;
}

DISPLAY_LINE
{
	CHANNEL = "Instruction_to_Control[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 22;
	TREE_LEVEL = 1;
	PARENT = 18;
}

DISPLAY_LINE
{
	CHANNEL = "Instruction_to_controlULA";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 23;
	TREE_LEVEL = 0;
	CHILDREN = 24, 25, 26;
}

DISPLAY_LINE
{
	CHANNEL = "Instruction_to_controlULA[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 24;
	TREE_LEVEL = 1;
	PARENT = 23;
}

DISPLAY_LINE
{
	CHANNEL = "Instruction_to_controlULA[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 25;
	TREE_LEVEL = 1;
	PARENT = 23;
}

DISPLAY_LINE
{
	CHANNEL = "Instruction_to_controlULA[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 26;
	TREE_LEVEL = 1;
	PARENT = 23;
}

DISPLAY_LINE
{
	CHANNEL = "Instruction_to_is_BEQ";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 27;
	TREE_LEVEL = 0;
	CHILDREN = 28, 29, 30, 31, 32, 33;
}

DISPLAY_LINE
{
	CHANNEL = "Instruction_to_is_BEQ[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 28;
	TREE_LEVEL = 1;
	PARENT = 27;
}

DISPLAY_LINE
{
	CHANNEL = "Instruction_to_is_BEQ[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 29;
	TREE_LEVEL = 1;
	PARENT = 27;
}

DISPLAY_LINE
{
	CHANNEL = "Instruction_to_is_BEQ[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 30;
	TREE_LEVEL = 1;
	PARENT = 27;
}

DISPLAY_LINE
{
	CHANNEL = "Instruction_to_is_BEQ[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 31;
	TREE_LEVEL = 1;
	PARENT = 27;
}

DISPLAY_LINE
{
	CHANNEL = "Instruction_to_is_BEQ[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 32;
	TREE_LEVEL = 1;
	PARENT = 27;
}

DISPLAY_LINE
{
	CHANNEL = "Instruction_to_is_BEQ[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 33;
	TREE_LEVEL = 1;
	PARENT = 27;
}

DISPLAY_LINE
{
	CHANNEL = "Instruction_to_Jump";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 34;
	TREE_LEVEL = 0;
	CHILDREN = 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46;
}

DISPLAY_LINE
{
	CHANNEL = "Instruction_to_Jump[11]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 35;
	TREE_LEVEL = 1;
	PARENT = 34;
}

DISPLAY_LINE
{
	CHANNEL = "Instruction_to_Jump[10]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 36;
	TREE_LEVEL = 1;
	PARENT = 34;
}

DISPLAY_LINE
{
	CHANNEL = "Instruction_to_Jump[9]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 37;
	TREE_LEVEL = 1;
	PARENT = 34;
}

DISPLAY_LINE
{
	CHANNEL = "Instruction_to_Jump[8]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 38;
	TREE_LEVEL = 1;
	PARENT = 34;
}

DISPLAY_LINE
{
	CHANNEL = "Instruction_to_Jump[7]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 39;
	TREE_LEVEL = 1;
	PARENT = 34;
}

DISPLAY_LINE
{
	CHANNEL = "Instruction_to_Jump[6]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 40;
	TREE_LEVEL = 1;
	PARENT = 34;
}

DISPLAY_LINE
{
	CHANNEL = "Instruction_to_Jump[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 41;
	TREE_LEVEL = 1;
	PARENT = 34;
}

DISPLAY_LINE
{
	CHANNEL = "Instruction_to_Jump[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 42;
	TREE_LEVEL = 1;
	PARENT = 34;
}

DISPLAY_LINE
{
	CHANNEL = "Instruction_to_Jump[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 43;
	TREE_LEVEL = 1;
	PARENT = 34;
}

DISPLAY_LINE
{
	CHANNEL = "Instruction_to_Jump[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 44;
	TREE_LEVEL = 1;
	PARENT = 34;
}

DISPLAY_LINE
{
	CHANNEL = "Instruction_to_Jump[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 45;
	TREE_LEVEL = 1;
	PARENT = 34;
}

DISPLAY_LINE
{
	CHANNEL = "Instruction_to_Jump[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 46;
	TREE_LEVEL = 1;
	PARENT = 34;
}

DISPLAY_LINE
{
	CHANNEL = "Instruction_to_register1";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 47;
	TREE_LEVEL = 0;
	CHILDREN = 48, 49, 50;
}

DISPLAY_LINE
{
	CHANNEL = "Instruction_to_register1[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 48;
	TREE_LEVEL = 1;
	PARENT = 47;
}

DISPLAY_LINE
{
	CHANNEL = "Instruction_to_register1[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 49;
	TREE_LEVEL = 1;
	PARENT = 47;
}

DISPLAY_LINE
{
	CHANNEL = "Instruction_to_register1[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 50;
	TREE_LEVEL = 1;
	PARENT = 47;
}

DISPLAY_LINE
{
	CHANNEL = "Instruction_to_register2";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 51;
	TREE_LEVEL = 0;
	CHILDREN = 52, 53, 54;
}

DISPLAY_LINE
{
	CHANNEL = "Instruction_to_register2[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 52;
	TREE_LEVEL = 1;
	PARENT = 51;
}

DISPLAY_LINE
{
	CHANNEL = "Instruction_to_register2[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 53;
	TREE_LEVEL = 1;
	PARENT = 51;
}

DISPLAY_LINE
{
	CHANNEL = "Instruction_to_register2[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 54;
	TREE_LEVEL = 1;
	PARENT = 51;
}

DISPLAY_LINE
{
	CHANNEL = "Instruction_to_writeRegister";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 55;
	TREE_LEVEL = 0;
	CHILDREN = 56, 57, 58;
}

DISPLAY_LINE
{
	CHANNEL = "Instruction_to_writeRegister[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 56;
	TREE_LEVEL = 1;
	PARENT = 55;
}

DISPLAY_LINE
{
	CHANNEL = "Instruction_to_writeRegister[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 57;
	TREE_LEVEL = 1;
	PARENT = 55;
}

DISPLAY_LINE
{
	CHANNEL = "Instruction_to_writeRegister[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 58;
	TREE_LEVEL = 1;
	PARENT = 55;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}
;
